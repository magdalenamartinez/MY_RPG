/*
** EPITECH PROJECT, 2022
** MY_RPG_H_
** File description:
** MY_RPG_H_
*/

#ifndef MY_RPG_H_
    #define MY_RPG_H_
    #define ERROR_EXIT 84
    #include <fcntl.h>
    #include <unistd.h>
    #include "my.h"
    #include <stdio.h>
    #include <string.h>
    #include <signal.h>
    #include <fcntl.h>
    #include <sys/stat.h>
    #include <SFML/Graphics.h>
    #include <SFML/Audio.h>
    #include <SFML/System.h>
    #include <SFML/Window.h>
    #include <SFML/Network.h>
    #include <math.h>
    #include <stdlib.h>
    #define MAX_BUFFER 2000000
    typedef struct npcs_struct {
        sfVector2f position;
        sfIntRect rect;
        char* name;
        int can_speak;
        int map;
        sfCircleShape* circle;
    } npcs_t;
    typedef struct enemy_struct {
        sfVector2f position;
        sfIntRect rect;
        int i;
        int notmove;
        sfCircleShape* circle;
        int life;
        int initial_life;
        sfColor color;
        int dir;
        int map;
        int change_color;
        int activ;
        int olddir;
        int counter_rect;
    } enemy_t;
    typedef struct data {
        sfVector2i mouse_pos;
        float npcs_sec;
        float npcs_sec2;
        float upclock_sec;
        int ataque;
        int level;
        int max;
        sfColor color;
        sfColor colorenemy;
        int change_color;
        int pause;
        int rep;
        int cambiar;
        sfClock *npcsclock;
        sfClock *npcsclock2;
        sfTime npcstime;
        sfIntRect ant;
        int display;
        sfSprite* screen0;
        sfSprite* hearts;
        sfSprite* levelup;
        sfSprite* dialogue_sp;
        sfIntRect rect4;
        sfSprite* inventary;
        sfSprite* volumeicon;
        sfSprite* npcs_sp;
        npcs_t* npcs;
        enemy_t* enemies;
        int continuee;
        sfIntRect ant2;
        sfSprite* enemies_sp;
        sfIntRect rect3;
        sfSprite* screen1;
        sfSprite* left;
        int parler;
        sfSprite* right;
        sfSprite* up;
        int newgame;
        int sumar;
        int restar;
        sfSprite* down;
        int iteration;
        int yes2;
        int first;
        sfSprite* story0;
        sfSprite* zelda;
        sfIntRect zelda_rect;
        sfVector2f zelda_pos;
        sfSprite* volumeMenu;
        sfSprite* set0;
        sfSprite* set1;
        int settings;
        sfIntRect rect_lifebar;
        sfIntRect rect_loadbar;
        sfClock* charging2;
        sfSprite* lifeBar;
        sfSprite* v0;
        sfSprite* v1;
        sfSprite* v2;
        sfSprite* v3;
        sfSprite* v4;
        sfSprite* v5;
        sfSprite* v6;
        sfSprite* v7;
        sfSprite* v8;
        sfSprite* v00;
        sfSprite* v11;
        sfTime time;
        int olddirection;
        sfIntRect rect;
        sfIntRect rectjump;
        int toolbool;
        sfSprite* link;
        sfSprite* gun;
        sfSprite* v22;
        int charge;
        sfSprite* cargar;
        sfIntRect icon_rect;
        sfVector2f icon_pos;
        sfClock *charging;
        sfSprite* load;
        sfSprite* v33;
        sfSprite* v44;
        sfSprite* v55;
        sfSprite* v66;
        sfSprite* v77;
        sfSprite* v88;
        sfMusic *intro;
        sfMusic *story_s;
        int  ya ;
        int m;
        int activate_fight;
        int maintheme_play;
        int playing;
        sfMusic *attack_music;
        sfMusic *end_m;
        sfMusic *over_m;
        int old_display;
        sfMusic *main_theme;
        sfVector2f link_pos;
        sfClock* clock;
        sfClock* levelupclock;
        sfClock* levelupclock2;
        int bucle;
        int ataca;
        int help;
        sfSprite *help_m;
        int counter;
        sfSoundBuffer *footsteps;
        sfSoundBuffer *level_b;
        sfSoundBuffer *gover_b;
        sfSoundBuffer *hurtlink_buf;
        sfSoundBuffer *dielink_buf;
        sfSoundBuffer *hurtenemy_buf;
        sfSoundBuffer *attack_buf;
        int i;
        int max_n;
        int gunbool;
        int activo;
        int yes;
        sfSound* footsteps_sound;
        sfSound* level_s;
        sfSound* gover_s;
        sfSound* hurtlink_sound;
        sfSound* dielink_sound;
        sfSound* hurtenemy_sound;
        sfSound* attack_sound;
        sfVector2f s;
        int dir;
        int numberofenemies;
        sfSprite* set_m;
        sfSprite* gameover;
        sfSprite* theend;
        int** array0;
        int animation;
        int** array1;
        int** array2;
        int** array3;
        int** array4;
        int** array5;
        int** array6;
        int** array7;
        int f1;
        int music_vol;
        int ef_vol;
        float seconds;
        int f2;
        sfSprite* castle;
        sfFont* font;
        sfText** array_txt;
        int pressed;
        char** dialogues;
        sfVector2i resolution;
        char* resolution_char;
        int close;
        int volume;
        int volumebar0;
        int over;
        int end;
        int volumebar1;
        int save;
        sfIntRect rect2;
        sfIntRect rectgun;
        sfIntRect recth;
        int numhearts;
        int lefthearts;
        sfVector2f redvector;
        sfIntRect *gun_array;
        sfSprite* gun2;
        sfRectangleShape* redRectangle;
        int numberofgun;
        sfVector2f poshearts;
        int map;
        int** array_map0;
        int** array_map1;
        int pri;
        int sec;
        int ter;
        int** array_map2;
        int** array_map3;
        int** array_map4;
        sfSprite* people;
        int not_change;
    }data_t;
    void loop(sfRenderWindow* window, sfEvent event, data_t* data);
    void initialise_loop(sfRenderWindow* window, sfEvent event, data_t* data);
    void time_function(sfRenderWindow* window, sfEvent event, data_t* data);
    void if_displaygame(sfRenderWindow* window, sfEvent event, data_t* data);
    void destroy_function(sfRenderWindow* window, sfEvent event, data_t* data);
    void change_attack(sfRenderWindow* window, sfEvent event, data_t* data);
    void loop_attack(sfRenderWindow* window, sfEvent event, data_t* data);
    void change_posgun(sfRenderWindow* window, sfEvent event, data_t* data);
    void create_window(void);
    void control_music0(sfRenderWindow* window, sfEvent event, data_t* data);
    void control_music1(sfRenderWindow* window, sfEvent event, data_t* data);
    void control_music12(sfRenderWindow* w, sfEvent e, data_t* data);
    void control_music(sfRenderWindow* w, sfEvent e, data_t* data);
    void allocate_npcs(sfRenderWindow* window, sfEvent event, data_t* data);
    void rectf(data_t* d);
    sfVector2f positionf(int i);
    void change_ant(data_t* data);
    char* namesf(int i);
    void depending_of_i(data_t* data, int i);
    void depending_of_i2(data_t* data, int i);
    void allocate_enemies(sfRenderWindow* window, sfEvent event, data_t* data);
    void change_ant2(data_t* data);
    sfVector2f position_e(int i);
    void rect_e(data_t* d);
    void allocate_music(data_t* data);
    void allocate_memory(sfRenderWindow* window, sfEvent event, data_t* data);
    void allocate_clock(data_t* data);
    void allocate_screen(data_t* data);
    void allocate_menu(data_t* data);
    data_t* init_data(void);
    void create_data(sfRenderWindow* window, sfEvent event);
    void initialise_gunarray(data_t* data);
    void allocate_mem_vol(sfRenderWindow* window, sfEvent event, data_t* data);
    sfRectangleShape* init_rectangleshape(sfVector2f position, sfVector2f size);
    void initialise_rect(sfRenderWindow* window, sfEvent event, data_t* data);
    void create_linksprites(sfRenderWindow* w, sfEvent e, data_t* data);
    sfSprite* crea(sfTexture* texture, sfVector2f p, sfVector2f s);
    void create_sprites(sfRenderWindow* window, sfEvent event, data_t* data);
    void sprites_menu(sfRenderWindow* window, sfEvent event, data_t* data);
    void sprites_volume(sfRenderWindow* window, sfEvent event, data_t* data);
    void sprites_screen(sfRenderWindow* window, sfEvent event, data_t* data);
    void sprites_clock(sfRenderWindow* window, sfEvent event, data_t* data);
    void change_volume(data_t* data, int a, int b);
    void check_right(data_t* data);
    void which_button0(sfRenderWindow* w, sfEvent e, data_t* data, int pos);
    void which_button1(sfRenderWindow* w, sfEvent e, data_t* data, int pos);
    void which_button2(sfRenderWindow* w, sfEvent e, data_t* data, int pos);
    void which_button3(sfRenderWindow* w, sfEvent e, data_t* data, int pos);
    void which_button0(sfRenderWindow* w, sfEvent e, data_t* data, int pos);
    void save_game(sfRenderWindow* window, sfEvent event, data_t * data);
    void change_olddirection(sfRenderWindow* w, sfEvent e, data_t* data);
    void check_direction(sfRenderWindow* window, sfEvent event, data_t* data);
    void check_widthrect(data_t* data);
    void check_pos(data_t* data);
    int** buttons_pos1(sfRenderWindow* window, sfEvent event, data_t* data);
    void array1_pos(int ** array);
    int is_button_pos1(data_t* d);
    int** buttons_pos2(sfRenderWindow* window, sfEvent event, data_t* data);
    void array2_pos(int ** array);
    int is_button_pos2(data_t* d);
    int** buttons_pos3(sfRenderWindow* window, sfEvent event, data_t* data);
    void array3_pos(int ** array);
    int is_button_pos3(data_t* d);
    int** buttons_pos4(sfRenderWindow* window, sfEvent event, data_t* data);
    void array4_pos(int ** array);
    int is_button_pos4(data_t* d);
    int** buttons_pos(sfRenderWindow* window, sfEvent event, data_t* data);
    void array_pos(int** array);
    void change_map(sfRenderWindow* window, sfEvent event, data_t* data);
    void which_map(sfRenderWindow* window, sfEvent event, data_t* data);
    int** choose_array(data_t* d);
    int bucle_while (data_t* d, int max, int a, int b);
    int study_pos1(data_t* d, int max, int j);
    void initialise_values_2(data_t* data);
    void initialise_values(data_t* data);
    void initialise_music(sfRenderWindow* window, sfEvent event, data_t* data);
    void initialise_arrays(sfRenderWindow* window, sfEvent event, data_t* data);
    void close_event(sfRenderWindow* window, sfEvent event, data_t *data);
    void button_clicked(sfRenderWindow* window, sfEvent event, data_t* data);
    void zero_screen(sfRenderWindow* window, sfEvent event, data_t* data);
    void first_screen(sfRenderWindow* window, sfEvent event, data_t* data);
    int is_button_pos(data_t* d);
    void continue_f(sfRenderWindow* window, sfEvent event, data_t* data);
    void newgame_f(sfRenderWindow* window, sfEvent event, data_t* data);
    void quitgame_f(sfRenderWindow* window, sfEvent event, data_t* data);
    void volume_f(sfRenderWindow* window, sfEvent event, data_t* data);
    void settings_f(sfRenderWindow* window, sfEvent event, data_t* data);
    void draw_npcs(sfRenderWindow* window, data_t* data, int i, int max);
    void which_npcs(sfRenderWindow* window, sfEvent event, data_t* data);
    void draw_animation(sfRenderWindow* window, sfEvent event, data_t* data);
    void draw_enemies(sfRenderWindow* window, sfEvent event, data_t* data);
    void gun_selected(sfRenderWindow* window, sfEvent event, data_t* data);
    void edit_lifebar(data_t* data, int i);
    void activ_bar(sfRenderWindow* window, sfEvent event, data_t* data, int i);
    void draw_hearts(sfRenderWindow* window, sfEvent event, data_t* data);
    int draw_hearts1(sfRenderWindow* w, sfEvent event, data_t* data, int i);
    int draw_hearts2(sfRenderWindow* w, sfEvent event, data_t* data, int i);
    int draw_hearts3(sfRenderWindow* w, sfEvent event, data_t* data, int i);
    void draw_inventary(sfRenderWindow* window, sfEvent event, data_t* data);
    void draw_firstdisplay(sfRenderWindow* window, sfEvent event, data_t* data);
    void draw_seconddisplay(sfRenderWindow* w, sfEvent event, data_t* data);
    void draw_volumethings(sfRenderWindow* window, sfEvent event, data_t* data);
    void draw_settings(sfRenderWindow* window, sfEvent event, data_t* data);
    void draw_function(sfRenderWindow* window, sfEvent event, data_t* data);
    void restart_s(data_t* data, float s);
    void move_enemy(sfRenderWindow* window, sfEvent event, data_t* data, int i);
    int which_direction(float x, float y, int cuadrante);
    int switch_x(int cuadrante);
    int switch_y(int cuadrante);
    void study_enemyposition(int max, data_t* d, int i);
    void check_posenemy(data_t* data, int i);
    void move_backenemy(int max, data_t* data, int i);
    void change_position(sfRenderWindow* w, sfEvent e, data_t* d, int i);
    void change_rect(sfRenderWindow* w, sfEvent e, data_t* d, int i);
    void study_numberofenemies(sfRenderWindow* w, sfEvent e, data_t* d, int i);
    void move_back(data_t* data);
    void reverse_moveback(data_t* data);
    void which_map_enemy(sfRenderWindow* window, sfEvent event, data_t* data);
    void color_function(sfRenderWindow* w, sfEvent event, data_t* data, int i);
    void first_switch(data_t* data, int i);
    void second_switch(data_t* data, int i);
    void activate_enemies(sfRenderWindow* w, sfEvent e, data_t* data);
    void activate_enemies_3(sfRenderWindow* w, sfEvent e, data_t* data, int i);
    void activate_enemies_2(sfRenderWindow* w, sfEvent e, data_t* data, int i);
    void animate_enemy2(sfRenderWindow* w, sfEvent e, data_t* data, int i);
    void animate_enemy(sfRenderWindow* w, sfEvent e, data_t* data, int i);
    void animate_enemy3(sfRenderWindow* w, sfEvent event, data_t* data, int i);
    void move_1(sfRenderWindow* window, sfEvent event, data_t* data);
    void move_2(sfRenderWindow* window, sfEvent event, data_t* data);
    void study_movement(sfRenderWindow* window, sfEvent event, data_t* data);
    void study_movement2(sfRenderWindow* window, sfEvent event, data_t* data);
    void attack_move(sfRenderWindow* window, sfEvent event, data_t* data);
    int check_numberpressed(sfEvent event, int opt, data_t* data);
    void check_movement1(sfRenderWindow* window, sfEvent event, data_t* data);
    void check_movement(sfRenderWindow* window, sfEvent event, data_t* data);
    int check_mov(sfEvent event, data_t* data);
    int escape_funcion(data_t* data);
    void pause_move0(sfRenderWindow* window, sfEvent event, data_t* data);
    void pause_movement(sfRenderWindow* window, sfEvent event, data_t* data);
    void reverse_change(data_t* data);
    void directions_check(sfRenderWindow* w, sfEvent e, data_t* data);
    void reset_function(sfRenderWindow* w, sfEvent e, data_t* data);
    void study_aux(sfRenderWindow* w, sfEvent e, data_t* data, int move);
#endif /*MY_RPG_H_*/
